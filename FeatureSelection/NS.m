function [result_labels class_acc overall_acc] = NS_me(test_hist, train_hist, ground_truth)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Compute the nearest subspace
% test_hist : testing histogram
%             D x N x C array, where:
%                 D := Dimension of histogram
%                 N := Number of test img instances 
%                 C := Number of object classes
% train_hist: the support of each subspace
%             D x N x C array, where:
%                 D := Dimension of histogram
%                 N := Number of training img instances 
%                 C := Number of object classes
%             i.e. train_hist(:, i, j) := training histogram of the i-th
%             image of class j.

% ground_truth : ground truth for test_hist
%                1 x N x C array, such that ground_truth(1, i, j) is the
%                correct label of the i-th instance for the j-th class in
%                test_hist.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[feat_dim num_imgs_per_obj num_objects ]= size(test_hist);
% train_hist = train_hist - repmat(mean(train_hist, 2), 1, size(train_hist, 2));
% test_hist = test_hist - repmat(mean(test_hist, 2), 1, size(test_hist, 2));

%% Compute Orthonormal Basis for each subspace
disp('Computing basis for each subspace...');
subspaces = cell(1, num_objects);

result_labels = zeros(1, num_imgs_per_obj, num_objects);
for i = 1:num_objects
    X = train_hist(:, :, i);
    % orth finds orthonormal basis of /cols/ of X
    orth_basis = orth(X);
    subspaces{1,i} = orth_basis;
    %SS_mat(:, :, i) = eye(feat_dim) - (X/(X'*X))*X';
end

% subspaces is a cell vector that stores the orthnonormal basis vectors for
% each class C. A vector of size 1xC, subspaces{1,i} returns a matrix where
% each col is an orthonormal basis vector.
%% For each histogram, find its nearest subspace
disp('Finding nearest subspace for each test image...');
for i = 1:num_objects
    dist_subspace = zeros(num_objects, num_imgs_per_obj);
    cur_hist = test_hist(:,:,i);
    % Find distance from histogram to each subspace. Recall that we can
    % compute this distance using: v = v_proj_S + v_perp_S =>
    % dist = v_perp_S = v - v_proj_S
    % where v_proj_S = ... + (v*v_i)/(v_i*v_i)*v_i + ... for orthonormal
    % basis of size n.
    
    for k = 1:num_objects
        dist = zeros(num_imgs_per_obj, 1);
        for j=1:num_imgs_per_obj
            %fprintf('i = %d/%d, k = %d/%d, j =%d/%d\n',i,num_objects,k,num_objects,j,num_imgs_per_obj);
            v = cur_hist(:,j);
            dist(j) = norm(v - proj_subspace(v, subspaces{1,k}));
        end
        dist_subspace(k, :) = dist;

        %diff = SS_mat(:, :, k)*cur_hist;
        %dist_subspace(k, :) = sqrt(sum(diff.^2, 1));
    end
    % dist_subspace(i, j) is the distance between the j-th histogram and
    % the i-th subspace
    [min_val_between_objs min_id_between_objs] = min(dist_subspace);
    
    result_labels(:, :, i) = min_id_between_objs;

end

%% Compute Accuracies
error = result_labels - ground_truth;
class_acc = sum(abs(error)==0, 2)./num_imgs_per_obj;
overall_acc = sum(sum(abs(error)==0))./(num_imgs_per_obj*num_objects);

end

function [proj] = proj_subspace(v, basis)

% Projects vector 'v' onto the subspace generated by orthonormal basis
% 'basis'.
% Inputs:
%   v: A column vector Nx1
%   basis: A matrix such that each col is a basis vector.
% Outputs:
%   proj: A column vector Nx1
[m,~] = size(v);
proj = zeros(m,1);
cols = size(basis);
cols = cols(2);
for col=1:cols
    u = basis(:,col);
    proj = proj + ((v' * u) / (u'*u))*u;
end

end
